/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * issued_books.java
 *
 * Created on 14 Jul, 2015, 10:15:57 AM
 */

package library_management;

import java.awt.print.PrinterException;
/**
 *
 * @author abhilasha
 */import java.sql.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class issued_books extends javax.swing.JFrame {

    Connection conn;
Statement stmt;
ResultSet rs;
String arr[]=new String[100];
String id;
    /** Creates new form issued_books */
    public issued_books(String a) {
        initComponents();
        
         id=a;
         validate();
        setSize(1250,700);
        setResizable(false);
        jTable1.setRowHeight(30);

          try
       {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           conn=DriverManager.getConnection("jdbc:odbc:library_management");
           System.out.println("connected");
           stmt=conn.createStatement();
          rs=stmt.executeQuery("select * from book_issue");
          while(rs.next())
          {
              
              String student_id=rs.getString("student_id");
              if(student_id.equals(id))
              {
                      int c=0;
              arr[c]=rs.getString("book_id");
              c++;
              arr[c]=rs.getString("book_name");
              c++;
              arr[c]=rs.getString("author_name");
              c++;
              arr[c]=rs.getString("issue_date");
             c++;

            arr[c]=rs.getString("expiry_date");

int d1=0,m1=0;
               GregorianCalendar g=new  GregorianCalendar();
   String ar1=(  g.get(Calendar.DATE)+"/"+g.get(Calendar.MONTH)+"/"+g.get(Calendar.YEAR));
            System.out.println(ar1);
  int length1=ar1.length();
   String year1=ar1.substring(length1-4,length1);
    int y1=Integer.parseInt(year1);
      System.out.println(y1);
      for(int i=0;i<length1-5;i++)
            {
                char ch1;

                ch1=ar1.charAt(i);
                if(ch1=='/')
                {
                    String day1=ar1.substring(0,i);
                    d1=Integer.parseInt(day1);
                   System.out.println(d1);
                    String month1=ar1.substring(i+1,length1-5);
                      m1=Integer.parseInt(month1);
                       System.out.println(m1);
                }
      }


            float f=0;


         String ar=arr[c];
        
            int length=ar.length();

            String year=ar.substring(length-4,length);
          int y=Integer.parseInt(year);

         
            for(int i=0;i<length-5;i++)
            {
                char ch;

                ch=ar.charAt(i);
                if(ch=='/')
                {
                    String day=ar.substring(0,i);
                   int d=Integer.parseInt(day);
                    String month=ar.substring(i+1,length-5);
                     int m=Integer.parseInt(month);
                    try
{
      Calendar calendar1=Calendar.getInstance();
       Calendar calendar2=Calendar.getInstance();
       calendar1.set(y,m,d);
        calendar2.set(y1,m1,d1);
       long miliSecondForDate1=calendar1.getTimeInMillis();
        System.out.println(miliSecondForDate1);
        long miliSecondForDate2=calendar2.getTimeInMillis();
        long diffInMilis=miliSecondForDate2-miliSecondForDate1;
         System.out.println(diffInMilis);
       long diffInDays=diffInMilis/(24*60*60*1000);
        System.out.println(diffInDays);


        f=2*diffInDays;
        if(f<0)
            f=0;

      System.out.println(f);


        }
        catch(Exception e)
        {
            e.printStackTrace();

        }




                }




            }

c++;
            arr[c]=""+f;

                 DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        model.addRow(arr);

              }



          }

}

     catch(SQLException se)
     {
System.out.println(se);
     }

     catch(ClassNotFoundException ce)
     {
System.out.println(ce);
     }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jTable1.setFont(new java.awt.Font("Traditional Arabic", 1, 14));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book-id", "Book Name", "Author Name", "Issue Date", "Expiry Date", "Fine"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(110, 60, 1020, 610);

        jButton1.setText("print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(1043, 30, 90, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/twitter-background-17.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1240, 780);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
 
        int a=evt.getKeyCode();
        int row=jTable1.getSelectedRow();
     System.out.println(a);
     if(a==10)
     {
         String book_id=String.valueOf(jTable1.getValueAt(row,0));
         String book_name=String.valueOf(jTable1.getValueAt(row, 1));
String author_name=String.valueOf(jTable1.getValueAt(row, 2));
String issue_date=String.valueOf(jTable1.getValueAt(row, 3));
String expiry_date=String.valueOf(jTable1.getValueAt(row, 4));
String fine=String.valueOf(jTable1.getValueAt(row, 5));

int p=JOptionPane.showConfirmDialog(null,"Are you sure you want to update this?");

     if(p==0)
     {



  try
       {
           Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
           conn=DriverManager.getConnection("jdbc:odbc:library_management");
           System.out.println("connected");
           stmt=conn.createStatement();
           rs=stmt.executeQuery("select * from book_issue");
           while(rs.next())
           {
             String b_id=rs.getString("book_id");
           if(b_id.equals(book_id))
           {
               int s=rs.getInt("ID");
           
          stmt.executeUpdate("update book_issue set book_name="+"'"+book_name+"'"+" where ID="+s);
           stmt.executeUpdate("update book_issue set author_name="+"'"+author_name+"'"+" where ID="+s);
            stmt.executeUpdate("update book_issue set issue_date="+"'"+issue_date+"'"+" where ID="+s);
             stmt.executeUpdate("update book_issue set expiry_date="+"'"+expiry_date+"'"+" where ID="+s);
             stmt.executeUpdate("update book_issue set fine="+"'"+fine+"'"+" where ID="+s);
}
  }
  }
     catch(SQLException se)
     {
System.out.println(se);
     }

     catch(ClassNotFoundException ce)
     {
System.out.println(ce);
     }

     }}        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try {
          jTable1.print();
        } catch (PrinterException pe) {
          System.out.println("Error printing: " + pe.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new issued_books("3").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
